// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	models "notifications-microservice/src/models"
)

// NotificationService is an autogenerated mock type for the NotificationService type
type NotificationService struct {
	mock.Mock
}

// CreateNotificationService provides a mock function with given fields: ctx, notification
func (_m *NotificationService) CreateNotificationService(ctx echo.Context, notification *models.NotificationModel) error {
	ret := _m.Called(ctx, notification)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, *models.NotificationModel) error); ok {
		r0 = rf(ctx, notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNotificationByIDService provides a mock function with given fields: ctx, id
func (_m *NotificationService) GetNotificationByIDService(ctx echo.Context, id string) (*models.NotificationModel, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationByIDService")
	}

	var r0 *models.NotificationModel
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (*models.NotificationModel, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) *models.NotificationModel); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NotificationModel)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationsByUserIDService provides a mock function with given fields: ctx, id
func (_m *NotificationService) GetNotificationsByUserIDService(ctx echo.Context, id string) ([]models.NotificationModel, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationsByUserIDService")
	}

	var r0 []models.NotificationModel
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) ([]models.NotificationModel, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) []models.NotificationModel); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.NotificationModel)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkAllAsReadService provides a mock function with given fields: ctx, id
func (_m *NotificationService) MarkAllAsReadService(ctx echo.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for MarkAllAsReadService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkAsReadService provides a mock function with given fields: ctx, id
func (_m *NotificationService) MarkAsReadService(ctx echo.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsReadService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNotificationService creates a new instance of NotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationService {
	mock := &NotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
