// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	models "ad-microservice/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// AdService is an autogenerated mock type for the AdService type
type AdService struct {
	mock.Mock
}

// CreateAdService provides a mock function with given fields: newAd
func (_m *AdService) CreateAdService(newAd models.Add) error {
	ret := _m.Called(newAd)

	if len(ret) == 0 {
		panic("no return value specified for CreateAdService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Add) error); ok {
		r0 = rf(newAd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAddByIDProductService provides a mock function with given fields: productID
func (_m *AdService) DeleteAddByIDProductService(productID string) error {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAddByIDProductService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAddByIDProductService provides a mock function with given fields: productID
func (_m *AdService) GetAddByIDProductService(productID string) (*models.Add, error) {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for GetAddByIDProductService")
	}

	var r0 *models.Add
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Add, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Add); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Add)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAdService provides a mock function with given fields:
func (_m *AdService) GetAllAdService() (*[]models.Add, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllAdService")
	}

	var r0 *[]models.Add
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]models.Add, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]models.Add); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Add)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAddDataService provides a mock function with given fields: idProduct, updatedAdd
func (_m *AdService) UpdateAddDataService(idProduct string, updatedAdd models.Add) error {
	ret := _m.Called(idProduct, updatedAdd)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAddDataService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.Add) error); ok {
		r0 = rf(idProduct, updatedAdd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAdService creates a new instance of AdService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdService {
	mock := &AdService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
