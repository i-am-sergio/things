// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	models "ad-microservice/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// AdRepository is an autogenerated mock type for the AdRepository type
type AdRepository struct {
	mock.Mock
}

// ConnectDB provides a mock function with given fields:
func (_m *AdRepository) ConnectDB() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConnectDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAd provides a mock function with given fields: newAd
func (_m *AdRepository) CreateAd(newAd models.Add) error {
	ret := _m.Called(newAd)

	if len(ret) == 0 {
		panic("no return value specified for CreateAd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Add) error); ok {
		r0 = rf(newAd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAddByProductID provides a mock function with given fields: productID
func (_m *AdRepository) DeleteAddByProductID(productID string) error {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAddByProductID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAddByIDProduct provides a mock function with given fields: productID
func (_m *AdRepository) GetAddByIDProduct(productID string) (*models.Add, error) {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for GetAddByIDProduct")
	}

	var r0 *models.Add
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Add, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Add); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Add)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAd provides a mock function with given fields:
func (_m *AdRepository) GetAllAd() (*[]models.Add, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllAd")
	}

	var r0 *[]models.Add
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]models.Add, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]models.Add); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Add)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAddData provides a mock function with given fields: updatedAdd
func (_m *AdRepository) UpdateAddData(updatedAdd models.Add) error {
	ret := _m.Called(updatedAdd)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAddData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Add) error); ok {
		r0 = rf(updatedAdd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAdRepository creates a new instance of AdRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdRepository {
	mock := &AdRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
